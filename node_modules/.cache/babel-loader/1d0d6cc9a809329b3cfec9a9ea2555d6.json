{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexports.__esModule = true;\n/**\r\n * Creates a new instance of Emitter.\r\n * @class\r\n * @returns {Object} Returns a new instance of Emitter.\r\n * @example\r\n * // Creates a new instance of Emitter.\r\n * var Emitter = require('emitter');\r\n *\r\n * var emitter = new Emitter();\r\n */\n\nvar Emitter = function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n  }\n  /**\r\n   * Adds a listener to the collection for the specified event.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to add.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Add an event listener to \"foo\" event.\r\n   * emitter.on('foo', listener);\r\n   */\n\n\n  Emitter.prototype.on = function on(event, listener) {\n    // Use the current collection or create it.\n    this._eventCollection = this._eventCollection || {}; // Use the current collection of an event or create it.\n\n    this._eventCollection[event] = this._eventCollection[event] || []; // Appends the listener into the collection of the given event\n\n    this._eventCollection[event].push(listener);\n\n    return this;\n  };\n  /**\r\n   * Adds a listener to the collection for the specified event that will be called only once.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to add.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Will add an event handler to \"foo\" event once.\r\n   * emitter.once('foo', listener);\r\n   */\n\n\n  Emitter.prototype.once = function once(event, listener) {\n    var self = this;\n\n    function fn() {\n      self.off(event, fn);\n      listener.apply(this, arguments);\n    }\n\n    fn.listener = listener;\n    this.on(event, fn);\n    return this;\n  };\n  /**\r\n   * Removes a listener from the collection for the specified event.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to remove.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Remove a given listener.\r\n   * emitter.off('foo', listener);\r\n   */\n\n\n  Emitter.prototype.off = function off(event, listener) {\n    var listeners = undefined; // Defines listeners value.\n\n    if (!this._eventCollection || !(listeners = this._eventCollection[event])) {\n      return this;\n    }\n\n    listeners.forEach(function (fn, i) {\n      if (fn === listener || fn.listener === listener) {\n        // Removes the given listener.\n        listeners.splice(i, 1);\n      }\n    }); // Removes an empty event collection.\n\n    if (listeners.length === 0) {\n      delete this._eventCollection[event];\n    }\n\n    return this;\n  };\n  /**\r\n   * Execute each item in the listener collection in order with the specified data.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The name of the event you want to emit.\r\n   * @param {...Object} data - Data to pass to the listeners.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Emits the \"foo\" event with 'param1' and 'param2' as arguments.\r\n   * emitter.emit('foo', 'param1', 'param2');\r\n   */\n\n\n  Emitter.prototype.emit = function emit(event) {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var listeners = undefined; // Defines listeners value.\n\n    if (!this._eventCollection || !(listeners = this._eventCollection[event])) {\n      return this;\n    } // Clone listeners\n\n\n    listeners = listeners.slice(0);\n    listeners.forEach(function (fn) {\n      return fn.apply(_this, args);\n    });\n    return this;\n  };\n\n  return Emitter;\n}();\n/**\r\n * Exports Emitter\r\n */\n\n\nexports[\"default\"] = Emitter;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}